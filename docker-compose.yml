version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-resume-postgres
    environment:
      POSTGRES_DB: ai_resume_screening
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai-resume-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-resume-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-resume-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (for document storage)
  mongodb:
    image: mongo:6
    container_name: ai-resume-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ai_resume_screening
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    ports:
      - "27017:27017"
    networks:
      - ai-resume-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-resume-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/ai_resume_screening
      MONGODB_URI: mongodb://admin:password@mongodb:27017/ai_resume_screening?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here
      JWT_REFRESH_SECRET: your-refresh-secret-key-here
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
      FRONTEND_URL: http://localhost:3001
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ai-resume-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-resume-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000/api/v1
      REACT_APP_WS_URL: ws://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - ai-resume-network
    restart: unless-stopped

  # ML Service (Python)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: ai-resume-ml-service
    environment:
      PYTHONPATH: /app
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_PATH: /app/models
      REDIS_URL: redis://redis:6379
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/data:/app/data
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - mongodb
    networks:
      - ai-resume-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-resume-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - ai-resume-network
    restart: unless-stopped

  # Elasticsearch (for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-resume-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ai-resume-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana (for Elasticsearch visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai-resume-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ai-resume-network
    restart: unless-stopped

  # Redis Commander (for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-resume-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ai-resume-network
    restart: unless-stopped

  # pgAdmin (for PostgreSQL management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai-resume-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@airesumescreening.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8082:80"
    depends_on:
      - postgres
    networks:
      - ai-resume-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  elasticsearch_data:
  pgadmin_data:

networks:
  ai-resume-network:
    driver: bridge 